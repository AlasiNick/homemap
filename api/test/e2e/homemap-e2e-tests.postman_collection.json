{
	"info": {
		"_postman_id": "5d35a279-0d28-4487-9a4b-3c97897c309c",
		"name": "homemap-e2e-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38235816"
	},
	"item": [
		{
			"name": "Get Projects Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data is an empty array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array').that.is.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/projects",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has project\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.environment.set(\"projectId\", responseData.id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Test Project\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/projects",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Receiver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has receiver\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.environment.set(\"receiverId\", responseData.id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Test Receiver\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/projects/{{projectId}}/receivers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"projects",
						"{{projectId}}",
						"receivers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Device",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has device data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.environment.set(\"deviceId\", responseData.id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"$type\": \"ac\",\r\n    \"name\": \"Test Device\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/receivers/{{receiverId}}/devices",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"receivers",
						"{{receiverId}}",
						"devices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Projects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data is an array with exactly 1 element\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array').with.lengthOf(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/projects",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is project\", function () {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data.id).to.eql(+pm.environment.get(\"projectId\"));\r",
							"    pm.expect(data.name).to.be.eql(\"Test Project\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/projects/{{projectId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"projects",
						"{{projectId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Receiver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is receiver\", function () {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data.id).to.eql(+pm.environment.get(\"receiverId\"));\r",
							"    pm.expect(data.name).to.be.eql(\"Test Receiver\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/receivers/{{receiverId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"receivers",
						"{{receiverId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Receivers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Receiver count is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/projects/{{projectId}}/receivers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"projects",
						"{{projectId}}",
						"receivers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Device by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Device data is valid\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData.id).to.equal(parseInt(pm.environment.get(\"deviceId\")));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/devices/{{deviceId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"devices",
						"{{deviceId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Devices by Receiver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/receivers/{{receiverId}}/devices",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"receivers",
						"{{receiverId}}",
						"devices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Device",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Updated device data is valid\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData.name).to.equal('Updated Test Device');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"$type\": \"ac\",\n    \"id\": {{deviceId}},\n    \"name\": \"Updated Test Device\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/devices/{{deviceId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"devices",
						"{{deviceId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Device",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/devices/{{deviceId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"devices",
						"{{deviceId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Devices Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.length).to.be.eq(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/receivers/{{receiverId}}/devices",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"receivers",
						"{{receiverId}}",
						"devices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Receiver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/receivers/{{receiverId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"receivers",
						"{{receiverId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Receivers Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an empty array\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.length).to.be.eq(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/projects/{{projectId}}/receivers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"projects",
						"{{projectId}}",
						"receivers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Updated project data is valid\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData.name).to.equal('Updated Test Project');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": {{projectId}},\n    \"name\": \"Updated Test Project\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/projects/{{projectId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"projects",
						"{{projectId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/projects/{{projectId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"projects",
						"{{projectId}}"
					]
				}
			},
			"response": []
		}
	]
}