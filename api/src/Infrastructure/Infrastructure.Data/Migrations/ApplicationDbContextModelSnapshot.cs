// <auto-generated />
using System;
using Homemap.Infrastructure.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Homemap.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Homemap.Domain.Core.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Devices", (string)null);

                    b.HasDiscriminator().HasValue("Device");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Homemap.Domain.Core.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("Homemap.Domain.Core.Receiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Receivers", (string)null);
                });

            modelBuilder.Entity("Homemap.Domain.Devices.ACDevice", b =>
                {
                    b.HasBaseType("Homemap.Domain.Core.Device");

                    b.HasDiscriminator().HasValue("ACDevice");
                });

            modelBuilder.Entity("Homemap.Domain.Devices.LightbulbDevice", b =>
                {
                    b.HasBaseType("Homemap.Domain.Core.Device");

                    b.HasDiscriminator().HasValue("LightbulbDevice");
                });

            modelBuilder.Entity("Homemap.Domain.Devices.SocketDevice", b =>
                {
                    b.HasBaseType("Homemap.Domain.Core.Device");

                    b.HasDiscriminator().HasValue("SocketDevice");
                });

            modelBuilder.Entity("Homemap.Domain.Devices.ThermostatDevice", b =>
                {
                    b.HasBaseType("Homemap.Domain.Core.Device");

                    b.HasDiscriminator().HasValue("ThermostatDevice");
                });

            modelBuilder.Entity("Homemap.Domain.Core.Device", b =>
                {
                    b.HasOne("Homemap.Domain.Core.Receiver", "Receiver")
                        .WithMany("Devices")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Homemap.Domain.Core.Receiver", b =>
                {
                    b.HasOne("Homemap.Domain.Core.Project", "Project")
                        .WithMany("Receivers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Homemap.Domain.Core.Project", b =>
                {
                    b.Navigation("Receivers");
                });

            modelBuilder.Entity("Homemap.Domain.Core.Receiver", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
