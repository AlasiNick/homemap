default:
  image: docker:27.4.0
  services:
    - docker:27.4.0-dind
  before_script:
    - docker info
    - apk add --no-cache curl jq python3 py3-pip
    - pip install --break-system-packages awscli
    - aws ecr get-login-password | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
  after_script:
    - docker logout ${DOCKER_REGISTRY}
  tags:
    # - itb2203
    - self-hosted

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_REGISTRY: 662032419283.dkr.ecr.eu-north-1.amazonaws.com/homemap

stages:
  - build
  - test
  - deploy

build:
  only:
    - main
  script:
    - echo Building and tagging Docker images...
    - docker-compose -f docker-compose.yml -f docker-compose.prod.yml build
    - echo Pushing images to Amazon ECR...
    - docker-compose -f docker-compose.yml -f docker-compose.prod.yml push
  stage: build

test/e2e/api:
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  only:
    - main
  script:
    - docker network create traefik_net
    - echo Testing API using Postman...
    - >
      docker-compose -f docker-compose.yml -f docker-compose.prod.yml -f docker-compose.e2e.yml up \
        --abort-on-container-exit --exit-code-from newman
    - echo Tearing down containers with volumes...
    - docker-compose down -v
  stage: test

deploy:
  image: alpine:latest
  inherit:
    default:
      - tags
  when: manual
  only:
    - main
  before_script:
    - "apk update"
    - "apk add --no-cache openssh-client"
    
    - mkdir -v -m 700 -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

    - eval $(ssh-agent -s)

    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H $DOMAIN >> ~/.ssh/known_hosts
    # - chmod 644 ~/.ssh/known_hosts
  script:
    - scp docker-compose.yml docker-compose.prod.yml nanomq.conf traefik.yml ubuntu@${DOMAIN}:~/
    - >
      ssh ubuntu@${DOMAIN} \
        "(aws ecr get-login-password | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}) \
        && DOMAIN=$DOMAIN ACME_EMAIL=$ACME_EMAIL docker compose -f ~/docker-compose.yml -f ~/docker-compose.prod.yml up -d"
  after_script:
    - exit
  stage: deploy
